local opt
local run_result
local run_debug
local run_trace
local generate_reference
local flag_day2
local verbose
local keep
run_result=
run_debug=
run_trace=
verbose=
keep=
generate_reference=
flag_day2=1
zparseopts -E -a opts r d t g o v q k
while getopts rdtgovqk opt $opts; do
    case $opt in
        r)
            run_result=1
            ;;
        d)
            run_result=1
            run_debug=1
            ;;
        t)
            run_result=1
            run_trace=1
            ;;
        g)
            run_result=1
            generate_reference=1
            ;;
        o)
            flag_day2=
            ;;
        v)
            verbose=1
            ;;
        q)
            quiet=1
            ;;
        k)
            keep=1
            ;;
    esac
done

# Find test names.
typeset -a test_names
for a in $@; do
    if [ $a[1] != "-" ]; then
        test_names=($test_names $a)
    fi
done

if [ -z "$test_names" ]; then
    echo "usage: $0 [-r] [-d] [-t] <test name> ..." >&2
    return 1
fi

function build_line
{
  prog=$1
  file=$2
  cmd=$3

  if [ -n "$verbose" ]; then
    echo $cmd
  elif [ -z "$quiet" ]; then
    printf "  [1;34m%-7s[0m %s\n" $prog $file
  fi
}

# Check to see whether we can find the source directory.
local root_dir=`rcd`
if [ -z "$root_dir" ]; then
    echo "Cannot find source directory.  Are you in the source repository?" >&2
    return 1
fi
test_root_dir="$root_dir/RegTests/Cores/Oban"

# See whether we can find all the tests specified.
local aarch32_required=0
for t in $test_names; do
    local test_dir="$test_root_dir/tests/$t"
    if [ ! -d "$test_dir" ]; then
        echo "Cannot find test directory '$test_dir'" >&2
        return 1
    fi
    if [ -e "$test_dir/$t.32.ss" ]; then
        aarch32_required=1
    fi
done

# Create temprorary directory.
echo -n "\r[2KCreating temporary directory..."
TBUILDDIR=$(mktemp -d -t $mktemp_flags tbuild.XXXXXX) || return 1
echo " $TBUILDDIR"

# Find RVCT programs.
echo -n "\r[2KFinding armasm for 64-bit..."
local rvct_ver_64=`detag RVCT:Programs:4.1::oban41a`
local rvct_ver_32
local armasm64=/arm/warehouse/RVCT/Programs/4.1/$rvct_ver_64/linux-pentium/armasm
local armcc64=/arm/warehouse/RVCT/Programs/4.1/$rvct_ver_64/linux-pentium/armcc
local armlink64=/arm/warehouse/RVCT/Programs/4.1/$rvct_ver_64/linux-pentium/armlink
local armasm32
local armcc32
local armlink32
if [ $aarch32_required != 0 ]; then
    echo -n "\r[2KFinding armasm for 32-bit..."
    rvct_ver_32=`detag RVCT:Programs:4.1::trunk`
    armasm32=/arm/warehouse/RVCT/Programs/4.1/$rvct_ver_32/linux-pentium/armasm
    armcc32=/arm/warehouse/RVCT/Programs/4.1/$rvct_ver_32/linux-pentium/armcc
    armlink32=/arm/warehouse/RVCT/Programs/4.1/$rvct_ver_32/linux-pentium/armlink
fi

# Find model_shell binary and MTI tools (for trace).
local modelshell_bin
if [ "$run_result" = "1" ]; then
    echo -n "\r[2KDetermining model_shell binary..."
    local modelshell_ver
    modelshell_ver=`detag ESL:ModelShell:0.0::trunk`
    modelshell_bin=/arm/warehouse/ESL/ModelShell/0.0/$modelshell_ver/Linux/bin/model_shell
fi
local trace_plugin
if [ -n "$run_trace" ]; then
    echo -n "\r[2KDetermining trace plugin..."
    local mtitools_ver
    mtitools_ver=`detag ESL:MTI_Tools:0.0::trunk`
    trace_plugin=/arm/warehouse/ESL/MTI_Tools/0.0/$mtitools_ver/internal/plugins/Linux_GCC-3.4/TarmacTrace.so
fi
echo -n "\r[2K"

# Find helper scripts.
local test_harness_builder_64="$test_root_dir/scripts/build_test_harness.py"
local test_harness_builder_32="$test_root_dir/scripts/build_test_harness_32.py"

# Bulid the pre-requisites.
base_asm_sources_64=(semi fp_constants start fputil)
base_c_sources_64=(vectors)
base_asm_sources_32=(semi fputil support)
base_c_sources_32=(vectors)
encoding_arg="--new-encoding"
if [ "$flag_day2" ]; then
  encoding_arg="--new-encoding2"
fi
for a in $base_asm_sources_64; do
    build_line ASM "$a.o" "$armasm64 -o \"$TBUILDDIR/$a.o\" $test_root_dir/src/$a.s --cpu=thumb64 --keep $encoding_arg"
    $armasm64 -o "$TBUILDDIR/$a.o" $test_root_dir/src/$a.s --cpu=thumb64 --keep $encoding_arg || return $?
done
for a in $base_c_sources_64; do
    build_line CC "$a.o" "$armcc64 -o \"$TBUILDDIR/$a.o\" -I $test_root_dir/src -c --cpu thumb64 $encoding_arg $test_root_dir/src/$a.c"
    $armcc64 -o "$TBUILDDIR/$a.o" -I $test_root_dir/src -c --cpu thumb64 $encoding_arg $test_root_dir/src/$a.c || return $?
done
if [ $aarch32_required != 0 ]; then
    for a in $base_asm_sources_32; do
        build_line ASM "$a.32.o" "$armasm32 -o \"$TBUILDDIR/$a.32.o\" $test_root_dir/src/$a.32.s --cpu=Eagle --apcs /interwork"
        $armasm32 -o "$TBUILDDIR/$a.32.o" $test_root_dir/src/$a.32.s --cpu=Eagle --apcs /interwork || return $?
    done
    for a in $base_c_sources_32; do
        build_line CC "$a.32.o" "$armcc32 -o \"$TBUILDDIR/$a.32.o\" -I $test_root_dir/src -c --cpu Eagle --apcs /interwork $test_root_dir/src/$a.32.c"
        $armcc32 -o "$TBUILDDIR/$a.32.o" -I $test_root_dir/src -c --cpu Eagle --apcs /interwork $test_root_dir/src/$a.32.c || return $?
    done
fi

# Work out the base objects.
local base_objects_64 base_objects_32
base_objects_64=()
base_objects_32=()
for o in $base_asm_sources_64 $base_c_sources_64; do
    base_objects_64=($base_objects_64 $TBUILDDIR/$o.o)
done
if [ $aarch32_required != 0 ]; then
    for o in $base_asm_sources_32 $base_c_sources_32; do
        base_objects_32=($base_objects_32 $TBUILDDIR/$o.32.o)
    done
fi

for t in $test_names; do
    local test_dir="$test_root_dir/tests/$t"
    local test_file_64="$test_dir/$t.ss"
    local test_file_32="$test_dir/$t.32.ss"
    local test_output_compare="$test_dir/$t.out"
    local test_err_compare="$test_dir/$t.err"

    # Build test harness.
    build_line HARNESS "$t.s" "$test_harness_builder_64 $t $test_file_64 \"$TBUILDDIR/$t.s\""
    $test_harness_builder_64 $t $test_file_64 "$TBUILDDIR/$t.s" || return $?
    # Assemble.
    build_line ASM "$t.o" "$armasm64 \"-I$test_dir\" -o \"$TBUILDDIR/$t.o\" \"$TBUILDDIR/$t.s\" --cpu=thumb64 --keep $encoding_arg"
    $armasm64 "-I$test_dir" -o "$TBUILDDIR/$t.o" "$TBUILDDIR/$t.s" --cpu=thumb64 --keep $encoding_arg || return $?
    # Link.
    build_line LINK "$t.axf" "$armlink64 --cpu thumb64 --no_scanlib --ro-base 0x8000 $encoding_arg -o \"$TBUILDDIR/$t.axf\" \"$TBUILDDIR/$t.o\" $base_objects_64"
    $armlink64 --cpu thumb64 --no_scanlib --ro-base 0x8000 $encoding_arg -o "$TBUILDDIR/$t.axf" "$TBUILDDIR/$t.o" $base_objects_64 || return $?
    # Copy
    build_line COPY "$t.axf" "cp \"$TBUILDDIR/$t.axf\" $t.axf"
    cp "$TBUILDDIR/$t.axf" $t.axf

    # Same for 32-bit.
    if [ -f "$test_file_32" ]; then
        # Build test harness.
        build_line HARNESS "$t.32.s" "$test_harness_builder_32 $t $test_file_32 \"$TBUILDDIR/$t.32.s\""
        $test_harness_builder_32 $t $test_file_32 "$TBUILDDIR/$t.32.s" || return $?
        # Assemble.
        build_line ASM "$t.32.o" "$armasm32 \"-I$test_dir\" -o \"$TBUILDDIR/$t.32.o\" \"$TBUILDDIR/$t.32.s\" --cpu=Eagle"
        $armasm32 "-I$test_dir" -o "$TBUILDDIR/$t.32.o" "$TBUILDDIR/$t.32.s" --cpu=Eagle || return $?
        # Link.
        build_line LINK "$t.32.axf" "$armlink32 --ro-base 0x80000 --no-remove -o \"$TBUILDDIR/$t.32.axf\" \"$TBUILDDIR/$t.32.o\" $base_objects_32"
        $armlink32 --ro-base 0x80000 --no-remove -o "$TBUILDDIR/$t.32.axf" "$TBUILDDIR/$t.32.o" $base_objects_32 || return $?
        # Copy
        build_line COPY "$t.32.axf" "cp \"$TBUILDDIR/$t.32.axf\" $t.32.axf"
        cp "$TBUILDDIR/$t.32.axf" $t.32.axf
    fi

    if [ "$run_result" = "1" ]; then
        typeset -a model_args
        local progress_diff=1
        model_args=($modelshell_bin -m $root_dir/Platforms/LISA/Validation/Build_ARMAEMv8AMP/Linux-Debug-GCC-4.1/cadi_system_Linux-Debug-GCC-4.1.so -C cpu.enable_64bit_VA=1 -C cpu.NUM_CORES=1)
        if [ "$flag_day2" ]; then
            model_args=($model_args -C cpu.flag_day2=1)
        fi
        if [ -f "$test_file_32" ]; then
            model_args=($model_args -a cpu.cpu0=$t.32.axf)
        fi
        model_args=($model_args -a cpu.cpu0=$t.axf)
        if [ -n "$run_debug" ]; then
            model_args=(gdb --args $model_args)
            progress_diff=0
        fi
        if [ -n "$run_trace" ]; then
            model_args=($model_args --trace-plugin $trace_plugin)
            progress_diff=0
        fi
        if [ -n "$generate_reference" ]; then
            progress_diff=0
        fi
        if [ "$progress_diff" = "1" -a ! -e "$test_output_compare" ]; then
          echo "[1;31mWARNING:[0m Test output file '$test_output_compare' not available."
          progress_diff=0
        fi
        if [ -z "$quiet" ]; then
          echo $model_args
        fi
        if [ -n "$run_trace" -a -z "$run_debug" ]; then
            # If running with trace and without debug (gdb) then pipe output to less.
            $model_args 2>&1 | less
        elif [ -n "$generate_reference" ]; then
            if [ -e "$test_output_compare" ]; then
              rm "$test_output_compare"
            fi
            if [ -e "$test_err_compare" ]; then
              rm "$test_err_compare"
            fi
            touch "$test_output_compare"
            touch "$test_err_compare"
            tail -n0 -f "$test_output_compare" &
            tail -n0 -f "$test_err_compare" &
            $model_args >"$test_output_compare" 2>"$test_err_compare"

            perl -i -ne '/^Simulation is started$|^Simulation is terminating\. Reason: Simulation stopped$|terminal_[0-3]: Listening for serial connection on port|^  ELR: 0x|^returning to 0x|^INFO: mmc: no image file connected$/ || print;' "$test_output_compare"
            perl -i -ne '/^DWARFCallFrameInfoDB::LoadDWARF: FDE list is empty, no useful call frame info available$|^ALSA / || print;' "$test_err_compare"

            # Kill the tail jobs.
            current_job_index=1
            jobs_to_ignore=$(($#jobstates - 2))
            for j in $jobstates; do
              if [ $current_job_index -gt $jobs_to_ignore ]; then
                pid=`perl -e 'split /[:=]/, $ARGV[0]; print "$_[2]\n";' "$j"`
                kill $pid
              fi
              current_job_index=$(($current_job_index + 1))
            done
        else
            if [ "$progress_diff" = "1" ]; then
              model_args=($HOME/bin/progressive-diff
                            -i '^Simulation is started$'
                            -i '^Simulation is terminating. Reason: Simulation stopped$'
                            -i '^terminal_[0-3]: Listening for serial connection on port'
                            -i '^  ELR: 0x'
                            -i '^returning to 0x'
                            -i '^INFO: mmc: no image file connected$'
                            -i '^DWARFCallFrameInfoDB::LoadDWARF: FDE list is empty, no useful call frame info available$'
                            -i '^ALSA '
                          $test_output_compare -- $model_args)
            fi
            $model_args
        fi
    fi
done

# Remove temporary directory.
if [ -z "$keep" ]; then
  echo -n "\r[2KRemoving temporary directory..."
  rm -r $TBUILDDIR
  echo -n "\r[2K"
else
  echo "\r[2KBuild complete. Files available in $TBUILDDIR"
fi

# vim: ft=zsh
