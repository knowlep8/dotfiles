root_dir=`rcd`
if [ -z "$root_dir" ]; then
  echo "Cannot find fastsim root directory." >&2
  return 1
fi

if [ -z "$1" ]; then
  echo "usage: $0 <job_name> ..." >&2
  return 2
fi

shared_manx_dir=/arm/scratch/paukno01/manx
shared_scripts_dir=$shared_manx_dir/scripts
shared_model_dir=$shared_manx_dir/model

results_csv=$shared_manx_dir/results.csv
results_copy=results.csv
lsf_width=200
xditest_src_path=$root_dir/build/PVModelLib/internal/bin/Linux_GCC-4.1/mxditest
mxditest_path=$shared_manx_dir/mxditest
project=pr484
release=
timeout=
custom_tool=

typeset -a jobs_files
typeset -a jobs_args
jobs_files=($jobs_files "*")
val_world=/projects/pr484_carnalea/suites/latest/validation
model_path=$root_dir/Platforms/LISA/Validation/Build_ARMAEMv8AMP/Linux-Debug-GCC-4.1
tool="$shared_model_dir/isim_system"

for f in $jobs_files; do
  if [ ${f#/} = $f ]; then
    job_file="$val_world/jobs_exec/$f.job"
  else
    job_file=$f
  fi
  jobs_args=($jobs_args ${~job_file})
done

echo "Updating shared scripts in $shared_scripts_dir..." >&2
rsync -a --delete "$root_dir/Scripts" $shared_scripts_dir || return $?

echo "Updating model ($model_path) in $shared_model_dir..." >&2
rsync -a --delete $model_path/* $shared_model_dir || return $?

model_path=$shared_model_dir/cadi_system_Linux-Debug-GCC-4.1.so

if [ -n "$custom_tool" ]; then
  echo "Copying tool to $shared_model_dir..." >&2
  cp $tool $shared_model_dir/tool
  tool=$shared_model_dir/tool
fi

typeset -a extra_args
extra_args=()
if [ "$timeout" ]; then
  extra_args=($extra_args --timeout=$timeout)
fi

echo "Running manx..." >&2
echo LSB_DEFAULTPROJECT=$project $shared_scripts_dir/Scripts/validation/manxwrap.py --valworld=$val_world --lsf-queue=normal --lsf-jobs=$lsf_width --csv-output=$results_csv --model=$model_path --use-shared-storage --tool $tool $jobs_args $extra_args
LSB_DEFAULTPROJECT=$project $shared_scripts_dir/Scripts/validation/manxwrap.py --valworld=$val_world --lsf-queue=normal --lsf-jobs=$lsf_width --csv-output=$results_csv --model=$model_path --use-shared-storage --tool $tool $jobs_args $extra_args
rc=$?

return $rc
