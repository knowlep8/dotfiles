local opt
local run_result
local run_debug
local run_trace
local generate_reference
local flag_day2
run_result=
run_debug=
run_trace=
generate_reference=
flag_day2=1
zparseopts -E -a opts r d t g o
echo $opts
while getopts rdtgo opt $opts; do
    case $opt in
        r)
            run_result=1
            ;;
        d)
            run_result=1
            run_debug=1
            ;;
        t)
            run_result=1
            run_trace=1
            ;;
        g)
            run_result=1
            generate_reference=1
            ;;
        o)
            flag_day2=
            ;;
    esac
done

# Find test names.
typeset -a test_names
for a in $@; do
    if [ $a[1] != "-" ]; then
        test_names=($test_names $a)
    fi
done

if [ -z "$test_names" ]; then
    echo "usage: $0 [-r] [-d] [-t] <test name> ..." >&2
    return 1
fi

# Check to see whether we can find the source directory.
local root_dir=`rcd`
if [ -z "$root_dir" ]; then
    echo "Cannot find source directory.  Are you in the source repository?" >&2
    return 1
fi
test_root_dir="$root_dir/RegTests/Cores/A15"

# Create temprorary directory.
echo -n "\r[2KCreating temporary directory..."
TBUILDDIR=$(mktemp -d -t $mktemp_flags tbuild.XXXXXX) || return 1
echo " $TBUILDDIR"

# Find RVCT programs.
warehouse_path RVCT Programs 4.1 :trunk >/dev/null
rvct_base=$(warehouse_path RVCT Programs 4.1 :trunk)/linux-pentium
armasm=$rvct_base/armasm
armcc=$rvct_base/armcc
armlink=$rvct_base/armlink

# Find model_shell binary and MTI tools (for trace).
local modelshell_bin
if [ "$run_result" = "1" ]; then
    local modelshell_base
    warehouse_path ESL ModelShell 0.0 :trunk >/dev/null
    modelshell_base=$(warehouse_path ESL ModelShell 0.0 :trunk)
    modelshell_bin=$modelshell_base/Linux/bin/model_shell
fi
local trace_plugin
if [ -n "$run_trace" ]; then
    local mtitools_base
    warehouse_path ESL MTI_Tools 0.0 :trunk >/dev/null
    modelshell_base=$(warehouse_path ESL MTI_Tools 0.0 :trunk)
    trace_plugin=$modelshell_base/internal/plugins/Linux_GCC-3.4/TarmacTraceInternal.so
fi
echo -n "\r[2K"

# Find helper scripts.
local test_harness_builder="$test_root_dir/scripts/build_test_harness.py"

# Bulid the pre-requisites.
base_asm_sources=(semi start fputil)
base_c_sources=(vectors)
for a in $base_asm_sources; do
    echo "  ASM     $a.o"
    $armasm -o "$TBUILDDIR/$a.o" $test_root_dir/src/$a.s --cpu=Cortex-A15 --keep || return $?
done
for a in $base_c_sources; do
    echo "  CC      $a.o"
    $armcc -o "$TBUILDDIR/$a.o" -I $test_root_dir/src -c --cpu=Cortex-A15 $test_root_dir/src/$a.c || return $?
done

# Work out the base objects.
local base_objects
base_objects=()
for o in $base_asm_sources $base_c_sources; do
    base_objects=($base_objects $TBUILDDIR/$o.o)
done

for t in $test_names; do
    local test_dir="$test_root_dir/tests/$t"
    local test_file="$test_dir/$t.ss"
    local test_output_compare="$test_dir/$t.out"
    local test_err_compare="$test_dir/$t.err"

    # Build test harness.
    echo "  HARNESS $t.s"
    $test_harness_builder $t $test_file "$TBUILDDIR/$t.s" || return $?
    # Assemble.
    echo "  ASM     $t.o"
    $armasm -o "$TBUILDDIR/$t.o" "$TBUILDDIR/$t.s" --cpu=Cortex-A15 --keep || return $?
    # Link.
    echo "  LINK    $t.axf"
    $armlink --cpu Cortex-A15 --no-remove --no_scanlib --ro-base 0x8000 -o "$TBUILDDIR/$t.axf" "$TBUILDDIR/$t.o" $base_objects || return $?
    # Copy
    echo "  COPY    $t.axf"
    cp "$TBUILDDIR/$t.axf" $t.axf

    if [ "$run_result" = "1" ]; then
        typeset -a model_args
        local progress_diff=1
        model_args=($modelshell_bin -m $root_dir/Platforms/LISA/RTSM_EB/Build_Cortex-A15x1/Linux-Debug-GCC-4.1/cadi_system_Linux-Debug-GCC-4.1.so -a $t.axf -C visualisation.disable_visualisation=1)
        if [ -n "$run_debug" ]; then
            model_args=(gdb --args $model_args)
            progress_diff=0
        fi
        if [ -n "$run_trace" ]; then
            model_args=($model_args --trace-plugin $trace_plugin)
            progress_diff=0
        fi
        if [ -n "$generate_reference" ]; then
            progress_diff=0
        fi
        if [ "$progress_diff" = "1" -a ! -e "$test_output_compare" ]; then
          echo "[1;31mWARNING:[0m Test output file '$test_output_compare' not available."
          progress_diff=0
        fi
        echo $model_args
        if [ -n "$run_trace" -a -z "$run_debug" ]; then
            # If running with trace and without debug (gdb) then pipe output to less.
            $model_args 2>&1 | less
        elif [ -n "$generate_reference" ]; then
            if [ -e "$test_output_compare" ]; then
              rm "$test_output_compare"
            fi
            if [ -e "$test_err_compare" ]; then
              rm "$test_err_compare"
            fi
            touch "$test_output_compare"
            touch "$test_err_compare"
            tail -n0 -f "$test_output_compare" &
            tail -n0 -f "$test_err_compare" &
            $model_args >"$test_output_compare" 2>"$test_err_compare"

            perl -i -ne '/^Simulation is started$|^Simulation is terminating\. Reason: Simulation stopped$|terminal_[0-3]: Listening for serial connection on port|^  ELR: 0x|^returning to 0x|^INFO: mmc: no image file connected$/ || print;' "$test_output_compare"
            perl -i -ne '/^DWARFCallFrameInfoDB::LoadDWARF: FDE list is empty, no useful call frame info available$|^ALSA / || print;' "$test_err_compare"

            # Kill the tail jobs.
            current_job_index=1
            jobs_to_ignore=$(($#jobstates - 2))
            for j in $jobstates; do
              if [ $current_job_index -gt $jobs_to_ignore ]; then
                pid=`perl -e 'split /[:=]/, $ARGV[0]; print "$_[2]\n";' "$j"`
                kill $pid
              fi
              current_job_index=$(($current_job_index + 1))
            done
        else
            if [ "$progress_diff" = "1" ]; then
              model_args=($HOME/bin/progressive-diff
                            -i '^Simulation is started$'
                            -i '^Simulation is terminating. Reason: Simulation stopped$'
                            -i '^terminal_[0-3]: Listening for serial connection on port'
                            -i '^  ELR: 0x'
                            -i '^returning to 0x'
                            -i '^INFO: mmc: no image file connected$'
                            -i '^DWARFCallFrameInfoDB::LoadDWARF: FDE list is empty, no useful call frame info available$'
                            -i '^ALSA '
                          $test_output_compare -- $model_args)
            fi
            $model_args
        fi
    fi
done

# Remove temporary directory.
echo -n "\r[2KRemoving temporary directory..."
rm -r $TBUILDDIR
echo -n "\r[2K"

# vim: ft=zsh
